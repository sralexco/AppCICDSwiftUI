# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  desc "Get certificates"
  lane :certificates do
    sync_code_signing(
      type: "adhoc",
      app_identifier: ['com.sralexco.AppCICD'],
      force_for_new_devices: true,
      readonly: false
    )
  end

  desc "Load ASC API Key information to use in subsequent lanes"
  lane :load_asc_api_key do
    app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_KEY"],
      is_key_content_base64: true,
      in_house: false # detecting this via ASC private key not currently supported
    )
  end

  desc "Bump build number based on most recent TestFlight build number"
  lane :fetch_and_increment_build_number do
   #fetch read your app identifier defined in your Appfile
   app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
   api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
   
   current_version = get_version_number(
     target: "AppCICDSwiftUI" # replace with your main target, required if you have more than one non-test target
   )
   
   latest_build_number = latest_testflight_build_number(
     api_key: api_key,
     version: current_version,
     app_identifier: app_identifier
   )
   increment_build_number(
     build_number: (latest_build_number + 1),
   )
  end

  desc "Build the iOS app for release"
  lane :build_release do |options|
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  
    profile_name = "match AppStore com.sralexco.AppCICD" # replace with the name of the profile to use for the build
    output_name = "AppCICDSwiftUI" # specify the name of the .ipa file to generate
    export_method = "appstore" # specify the export method
    team_id = "4LGFTVM7WD"
  
    match(type: "#{export_method}", force_for_new_devices: true, readonly: false)

     # 2. Get the profile path from environment variable
    profile_env_key = "sigh_#{app_identifier}_#{export_method}_profile-path"
    profile_path = ENV[profile_env_key]

    UI.message("Provisioning profile downloaded to: #{profile_path}")

    unless profile_path && File.exist?(profile_path)
      UI.user_error!("Provisioning profile not found at path: #{profile_path}")
    end

    update_project_provisioning(
      xcodeproj: "AppCICDSwiftUI.xcodeproj",
      target_filter: "AppCICDSwiftUI",
      profile: profile_path,
      code_signing_identity: "Apple Distribution",
      build_configuration: "Release"
    )
    
   # build the app
   gym(
     workspace: "AppCICDSwiftUI.xcworkspace",
     scheme: "AppCICDSwiftUI",
     output_name: output_name,
     configuration: "Release",
     export_options: {
       method: export_method,
       teamID: team_id,
       signingStyle: "manual",
       provisioningProfiles: {
         app_identifier => profile_name # here you can add any additional bundle identifiers and their associated provisioning profiles if youâ€™re also building an app extension or other bundle identifier
       }
     },
     output_directory: "./build"
   )
  end

  desc "Upload to TestFlight / ASC"
  lane :upload_release do
   api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
  
   deliver(
       api_key: api_key,
       skip_screenshots: true,
       skip_metadata: true,
       skip_app_version_update: true,
       force: true, # skips verification of HTML preview file (since this will be run from a CI machine)
       run_precheck_before_submit: false # not supported through ASC API yet
   )
  end

  desc "Build and upload to TestFlight"
  lane :build_upload_testflight do
    load_asc_api_key
    setup_ci
    certificates
    fetch_and_increment_build_number
    build_release
    upload_release
  end

  desc "Builds project and executes unit tests"
  lane :unit_test do |options|
      scan(
        clean: options[:clean],
        skip_package_dependencies_resolution: options[:skip_package_dependencies_resolution],
        verbose: true
      )
  end

end